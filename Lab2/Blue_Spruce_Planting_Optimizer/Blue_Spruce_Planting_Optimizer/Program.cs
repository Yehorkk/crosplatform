using System;
using System.IO;
using System.Linq;

/*Вариант 58
Мэр города Урюпинска решил посадить на главной аллее города, которая проходит 
с запада на восток, голубые ели. Причем сажать ели можно не во всех местах, 
а только на специально оставленных при асфальтировании аллеи клумбах.
Как оказалось, голубые ели бывают M различных сортов. Для ели каждого сорта 
известна максимальная длина ее тени в течение дня в западном и в восточном 
направлении (Wi и Ei соответственно). При этом известно, что ели растут гораздо 
лучше, если в течение дня они не оказываются в тени других елей.
Координатная ось направлена вдоль аллеи с запада на восток.
По заданным координатам клумб вычислите максимальное число елей, которое можно 
посадить, соблюдая условие о том, что никакая ель не должна попадать в тень от другой ели.
Входные данные
Во входном файле INPUT.TXT записано сначала натуральное число M — количество 
сортов елей (1 ≤ M ≤ 100). Затем идет M пар чисел Wi, Ei, описывающих максимальную 
длину тени в западном и восточном направлении в течение дня для каждого сорта ели 
(числа Wi, Ei — целые, из диапазона от 0 до 30000). Далее идет натуральное число 
N — количество клумб, в которых можно сажать ели (1 ≤ N ≤ 100). Далее идет N чисел, 
задающих координаты клумб (координаты — целые числа, по модулю не превышающие 30000). 
Клумбы перечислены с запада на восток (в порядке возрастания их координат).
Примечание
Если на клумбе с координатой X мы посадили ель, максимальная тень которой в восточном 
направлении равна E, то все клумбы с координатами от X+1 до X+E–1 попадают в тень 
от этой ели, а клумба с координатами X+E — уже нет. Аналогично для тени в западном направлении.
Выходные данные
В выходной файл OUTPUT.TXT выведите число A — максимальное количество елей, которые удастся посадить.
*/
class Program
{
    static void Main(string[] args)
    {
        try
        {
            using (StreamReader reader = new StreamReader("INPUT.TXT"))
            using (StreamWriter writer = new StreamWriter("OUTPUT.TXT"))
            {
                // Ввод елей
                int M = int.Parse(reader.ReadLine());

                if (M <= 0)
                {
                    Console.WriteLine("Ошибка: M должно быть положительным числом.");
                    return;
                }

                int[][] varieties = new int[M][];
                for (int i = 0; i < M; i++)
                {
                    string[] values = reader.ReadLine().Split();
                    if (values.Length != 2 || !int.TryParse(values[0], out int W) || !int.TryParse(values[1], out int E))
                    {
                        Console.WriteLine($"Ошибка в строке {i + 2}: Некорректные данные для сорта ели.");
                        return;
                    }
                    varieties[i] = new int[] { W, E };
                }

                // Ввод клумб
                int N = int.Parse(reader.ReadLine());

                if (N <= 0)
                {
                    Console.WriteLine("Ошибка: N должно быть положительным числом.");
                    return;
                }

                int[] flowerbeds = new int[N];
                string[] flowerbedValues = reader.ReadLine().Split();

                if (flowerbedValues.Length != N)
                {
                    Console.WriteLine("Ошибка: Количество координат клумб должно быть равно N.");
                    return;
                }

                for (int i = 0; i < N; i++)
                {
                    if (!int.TryParse(flowerbedValues[i], out flowerbeds[i]))
                    {
                        Console.WriteLine($"Ошибка в строке {i + M + 3}: Некорректные данные для клумбы.");
                        return;
                    }
                }

                int[][] dp = new int[M][];
                for (int i = 0; i < M; i++)
                {
                    dp[i] = new int[N];
                }

                for (int i = 0; i < M; i++)
                {
                    dp[i][0] = 1;
                }

                // Перебор всех возможных вариантов
                for (int i = 1; i < N; i++) // Перебираем клумбы
                {
                    for (int j = 0; j < M; j++) // Перебираем ели
                    {
                        for (int i0 = 0; i0 < i; i0++) // Доп перебор клумб
                        {
                            for (int j0 = 0; j0 < M; j0++) // Доп перебор елей
                            {
                                if (flowerbeds[i0] + varieties[j0][1] <= flowerbeds[i] && // условие проверяет, не будет ли тень от ели j0 перекрывать клумбу i, если посадить ее в клумбу i0.
                                    flowerbeds[i] - varieties[j][0] >= flowerbeds[i0])    // условие проверяет, не будет ли тень от ели j перекрывать клумбу i0, если посадить ее в клумбу i.
                                {
                                    dp[j][i] = Math.Max(dp[j][i], dp[j0][i0] + 1);
                                }
                            }
                        }
                    }
                }

                int ans = 0;

                for (int i = 0; i < M; i++)
                {
                    ans = Math.Max(ans, dp[i][N - 1]);
                }

                writer.WriteLine(ans);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла ошибка: {ex.Message}");
        }
    }
}
